#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd


# In[2]:


#Read the data from local drive
mv = pd.read_csv(r'/Users/aviswe/Desktop/FSDS/Data_files/Movie-Rating.csv')


# In[3]:


mv


# In[4]:


#Query to know the sum of null values in movie data
mv.isnull().sum()


# In[5]:


#List of Columns in data
mv.columns


# In[6]:


#information on the data set
 mv.info()


# In[7]:


#Shape of the dataset
mv.shape


# In[8]:


#Type of the dataset
type(mv)


# In[9]:


#lengthof the data set
len(mv)


# In[10]:


#top 5 rows from the data set
mv.head()


# In[11]:


#Bottom 5 rows from the data set
mv.tail()


# In[12]:


mv.columns


# In[13]:


#Renaming the columns
mv.columns=['Film', 'Genre', 'CriticRatings', 'AudienceRatings','BudgetInMillion', 'Year']


# In[14]:


mv.head(1)


# In[15]:


#Statistical analysis of the dataset
mv.describe()


# In[16]:


mv.info()


# In[17]:


#Changing the type of the data columns
mv.Film= mv.Film.astype('category')
mv.Genre = mv.Genre.astype('category')
mv.Year = mv.Year.astype('int')


# In[18]:


mv.info()


# In[19]:


#importing the required libraies
from matplotlib import pyplot as plt
import seaborn as sns
get_ipython().run_line_magic('matplotlib', 'inline')
import warnings
warnings.filterwarnings('ignore')


# In[20]:


mv.head()


# In[22]:


#Jointplot to compare the Critics ratings with Audience Ratings 
j = sns.jointplot( data = mv, x = 'CriticRatings', y = 'AudienceRatings')

# Audience rating is more dominant then critics rating
# Based on this we find out as most people are most liklihood to watch audience rating & less likely to wathc critics rating
# let me explain the excel - if you filter audience rating & critic rating. critic rating has very low values compare to audience rating 


# In[23]:


j1 = sns.jointplot( data = mv, x = 'CriticRatings', y = 'AudienceRatings',kind = 'hex')


# In[75]:


j1 = sns.jointplot( data = mv, x = 'CriticRatings', y = 'AudienceRatings',kind = 'reg')


# In[27]:


m1 = sns.distplot(mv.AudienceRatings)

#Seaborn is very powerful library where the Y-Axis is automatically generated by seaborn itself


# In[28]:


sns.set_style('darkgrid')


# In[30]:


m2 = sns.distplot(mv.AudienceRatings, bins = 15)


# In[31]:


sns.set_style('darkgrid')


# In[33]:


n1 = plt.hist(mv.AudienceRatings, bins=15)


# In[34]:


sns.set_style('white') #normal distribution & called as bell curve
n1 = plt.hist(mv.AudienceRatings, bins=20)


# In[35]:


n1 = plt.hist(mv.CriticRatings, bins=20) #uniform distribution


# In[37]:


plt.hist(mv.BudgetInMillion)
plt.show()


# In[39]:


plt.hist(mv[mv.Genre == 'Drama'].BudgetInMillion)
plt.show()


# In[40]:


mv.head()


# In[41]:


mv.Genre.unique()


# In[42]:


plt.hist(mv[mv.Genre == 'Action'].BudgetInMillion, bins = 20)
plt.hist(mv[mv.Genre == 'Thriller'].BudgetInMillion, bins = 20)
plt.hist(mv[mv.Genre == 'Drama'].BudgetInMillion, bins = 20)
plt.legend()
plt.show()


# In[43]:


plt.hist([mv[mv.Genre == 'Action'].BudgetInMillion,\
          mv[mv.Genre == 'Drama'].BudgetInMillion, \
          mv[mv.Genre == 'Thriller'].BudgetInMillion, \
          mv[mv.Genre == 'Comedy'].BudgetInMillion],
         bins = 20, stacked = True)
plt.show() 


# In[44]:


# Loop to iterate through all the categories
for gen in mv.Genre.cat.categories:
    print(gen)


# In[45]:


#Critics and Audience ratings analysis using lmplot,Seborn
vis1 = sns.lmplot(data=mv, x='CriticRatings', y='AudienceRatings',\
                 fit_reg=False)


# In[46]:


vis1 = sns.lmplot(data=mv, x='CriticRatings', y='AudienceRatings',\
                 fit_reg=False, hue = 'Genre')


# In[47]:


plt.style.use('dark_background')
vis1 = sns.lmplot(data=mv, x='CriticRatings', y='AudienceRatings',fit_reg=False, hue = 'Genre', height= 10,aspect=1) 


# In[50]:


# Kernal Density Estimate plot ( KDE PLOT) 
# how can i visulize audience rating & critics rating . using scatterplot

plt.style.use('default')


# In[49]:


k1 = sns.kdeplot(x ='CriticRatings',y ='AudienceRatings', data = mv )

# where do u find more density and how density is distibuted across from the the chat 
# center point is kernal this is calld KDE & insteade of dots it visualize like this
# we can able to clearly see the spread at the audience ratings


# In[51]:


k1 = sns.kdeplot(data=mv, x='CriticRatings', y='AudienceRatings', shade=True, shade_lowest=False, cmap='Reds')


# In[52]:


k2 = sns.kdeplot(data = mv, x= 'CriticRatings', y= 'AudienceRatings',shade_lowest=False,cmap='Greens_r')


# In[53]:


sns.set_style('dark')
k1 = sns.kdeplot(data = mv, x = 'BudgetInMillion',y ='AudienceRatings',shade_lowest=False,cmap='Greens_r')


# In[54]:


sns.set_style('dark')
k1 = sns.kdeplot(data = mv, x = 'BudgetInMillion',y ='AudienceRatings')


# In[55]:


#subplots

f, ax = plt.subplots(1,2, figsize =(12,6))


# In[56]:


f, ax = plt.subplots(3,3, figsize =(12,6))


# In[57]:


f, axes = plt.subplots(1,2, figsize=(12,6))
k1 = sns.kdeplot(data=mv,x='BudgetInMillion',y='AudienceRatings',ax = axes[0])
k2 = sns.kdeplot(data=mv,x='BudgetInMillion',y= 'CriticRatings',ax = axes[1])


# In[58]:


axes


# In[60]:


#Box Plots
w=sns.boxplot(data = mv,x='Genre',y= 'CriticRatings')


# In[61]:


#violon plot
z= sns.violinplot(data = mv,x= 'Genre',y= 'CriticRatings')


# In[63]:


w1 = sns.boxplot(data = mv[mv.Genre=='Drama'],x='Year',y = 'CriticRatings')


# In[65]:


z=sns.violinplot(data =mv[mv.Genre =='Drama'],x = 'Year',y= 'CriticRatings')


# In[66]:


#Creating the Facet grid
plt.style.use('default')


# In[68]:


g = sns.FacetGrid(mv,row = 'Genre',col = 'Year',hue = 'Genre')  #kind of subplots


# In[69]:


plt.style.use('dark_background')
plt.scatter(mv.CriticRatings,mv.AudienceRatings)


# In[70]:


plt.style.use('dark_background')
g = sns.FacetGrid(mv,row= 'Genre',col = 'Year',hue = 'Genre')
g= g.map(plt.scatter,'CriticRatings','AudienceRatings')


# In[71]:


# you can populated any type of chat. 

g =sns.FacetGrid (mv, row = 'Genre', col = 'Year', hue = 'Genre')
g = g.map(plt.hist, 'BudgetInMillion') #scatterplots are mapped in facetgrid


# In[72]:


g =sns.FacetGrid (mv, row = 'Genre', col = 'Year', hue = 'Genre')
kws = dict(s=50, linewidth=0.5,edgecolor='black')
g = g.map(plt.scatter, 'CriticRatings', 'AudienceRatings',**kws ) #scatterplots are mapped in facetgrid


# In[73]:


# python is not vectorize programming language
# Building dashboards (dashboard - combination of chats)

sns.set_style('darkgrid')
f, axes = plt.subplots (2,2, figsize = (8,8))

k1 = sns.kdeplot(x = mv.BudgetInMillion,y = mv.AudienceRatings,ax=axes[0,0])
k2 = sns.kdeplot(x = mv.BudgetInMillion,y = mv.CriticRatings,ax = axes[0,1])

k1.set(xlim=(-20,160))
k2.set(xlim=(-20,160))

z = sns.violinplot(data=mv[mv.Genre=='Drama'], x='Year', y = 'CriticRatings', ax=axes[1,0])

k4 = sns.kdeplot(x = mv.CriticRatings,y=mv.AudienceRatings,shade = True,shade_lowest=False,cmap='Reds',ax=axes[1,1])

k4b = sns.kdeplot(x = mv.CriticRatings,y = mv.AudienceRatings,cmap='Reds',ax = axes[1,1])

plt.show()


# In[74]:


# How can you style your dashboard  using different color map

# python is not vectorize programming language
# Building dashboards (dashboard - combination of chats)

sns.set_style('dark',{'axes.facecolor':'black'})
f, axes = plt.subplots (2,2, figsize = (15,15))

#plot [0,0]
k1 = sns.kdeplot(x = mv.BudgetInMillion,y = mv.AudienceRatings, \
                 shade = True, shade_lowest=True,cmap = 'inferno', \
                 ax = axes[0,0])
k1b = sns.kdeplot(x= mv.BudgetInMillion,y =  mv.AudienceRatings, \
                 cmap = 'cool',ax = axes[0,0])

#plot [0,1]
k2 = sns.kdeplot(x= mv.BudgetInMillion,y=mv.CriticRatings,\
                 shade=True, shade_lowest=True, cmap='inferno',\
                 ax = axes[0,1])
k2b = sns.kdeplot(x=mv.BudgetInMillion,y=mv.CriticRatings,\
                  cmap = 'cool', ax = axes[0,1])

#plot[1,0]
z = sns.violinplot(data=mv[mv.Genre=='Drama'], \
                   x='Year', y = 'CriticRatings', ax=axes[1,0])

#plot[1,1]
k4 = sns.kdeplot(x = mv.CriticRatings,y =mv.AudienceRatings, \
                 shade = True,shade_lowest=False,cmap='Blues_r', \
                 ax=axes[1,1])

k4b = sns.kdeplot(x = mv.CriticRatings,y = mv.AudienceRatings, \
                  cmap='gist_gray_r',ax = axes[1,1])


k1.set(xlim=(-20,160))
k2.set(xlim=(-20,160))

plt.show()


# Final discussion what we learn so far - 
# 1> category datatype in python
# 2> jointplots
# 3> histogram
# 4> stacked histograms
# 5> Kde plot
# 6> subplot
# 7> violin plots
# 8> Factet grid
# 9> Building dashboards
